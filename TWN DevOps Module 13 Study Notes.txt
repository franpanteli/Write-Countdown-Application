1. introduction to Python
   -> definition
     -> Python is a high-level, interpreted programming language, created by Guido van Rossum and first released in 1991
     -> it is designed to be easy to read, with a clean and simple syntax that emphasises readability and reduces the cost of program maintenance

   -> purpose
     -> Python supports multiple programming paradigms including procedural, object-oriented, and functional programming
     -> it is widely used for web development, data analysis, machine learning, automation, and scientific computing

   -> why Python
     -> simple syntax that is easy to understand and write
     -> extensive libraries and frameworks (e.g., Django, Flask, NumPy, Pandas, TensorFlow)
     -> Python's large community provides strong support, documentation, and tutorials

2. install Python & local setup
   -> installation
     -> install Python from the official website: https://python.org
     -> ensure you download the latest stable version of Python 3 (as Python 2 is deprecated)
     -> installation includes the Python interpreter, a built-in library, and the `pip` package manager
     -> optionally install an IDE (Integrated Development Environment) such as PyCharm, Visual Studio Code, or Jupyter Notebook

   -> setting up
     -> ensure that the Python binary is added to your system's PATH environment variable so you can run Python from any directory via the command line
     -> to check if Python is installed correctly, use the command `python --version` (or `python3 --version` on certain systems)

   -> IDE Setup
     -> install an IDE such as PyCharm or Visual Studio Code for better coding assistance
     -> PyCharm offers advanced features like autocompletion, project navigation, version control integration, and a debugger, which can be very helpful for beginners and professionals alike

3. writing your first program
   -> concept
     -> start with a simple "Hello, World!" program to demonstrate how to write and run a Python script
   -> execution
     -> write the following code in a file, say `hello.py`:
     ```python
     print("Hello, World!")
     ```
     -> to execute the script, run `python hello.py` in the terminal or use the IDE's run button
   -> output
     -> when executed, the script will print: `Hello, World!`

4. Python IDE vs simple file editors
   -> Python IDE
     -> an IDE provides comprehensive tools for code development, such as code completion, debugging, project management, and integrated version control
     -> examples: PyCharm, Visual Studio Code, Atom

   -> simple file editors
     -> lightweight tools like Notepad++, Sublime Text, or even basic text editors provide a minimal environment for coding but lack some advanced features
     -> suitable for smaller projects or quick scripts, but might not be optimal for larger or collaborative development

   -> best practice
     -> for professional or large-scale projects, use an IDE for its extended functionality, whereas simple editors are great for rapid prototyping or small scripts

5. data types: strings and numbers
   -> strings
     -> a string is a sequence of characters enclosed in either single (`'`) or double (`"`) quotes
     -> Example:
       ```python
       name = "Alice"
       greeting = 'Hello, World!'
       ```

   -> numbers
     -> Python has two types of numeric values: integers and floating-point numbers
     -> integers: Whole numbers (e.g., `25`, `-12`)
     -> floats: Numbers that contain decimal points (e.g., `3.14`, `-0.001`)
     -> example:
       ```python
       age = 25          # Integer
       pi = 3.14159      # Float
       ```

6. variables
   -> definition
     -> variables are used to store data in memory. In Python, variables don't require explicit type declaration, as they are dynamically typed
     -> variable assignment in Python uses the `=` operator
   -> example
     ```python
     score = 100  # Variable assignment
     name = "Bob" # Variable assignment with string
     ```

7. functions
   -> definition
     -> functions are blocks of code that can be reused. They allow us to group code into logical units that perform specific tasks

   -> creating functions
     -> use the `def` keyword to define a function. Functions can have parameters and return values
     -> example:
       ```python
       def greet(name):
           return f"Hello, {name}!"
       print(greet("Alice"))  # Outputs: Hello, Alice!
       ```
   -> key points
     -> functions are essential for code reuse, improving readability, and reducing errors
     -> functions can also return multiple values using tuples or lists

8. user Input and Output
   -> User Input
     -> the `input()` function is used to read input from the user at runtime
     -> Example:
       ```python
       user_name = input("Enter your name: ")
       print(f"Hello, {user_name}!")
       ```
     -> input returns a string by default. To convert it to another data type (e.g., integer), you can use `int()` or `float()`
       ```python
       age = int(input("Enter your age: "))
       ```

9. conditional statements (if, elif, else)
   -> purpose
     -> conditional statements allow you to execute different blocks of code based on specific conditions
   -> example
     ```python
     age = 18
     if age < 18:
         print("You're a minor")
     elif age == 18:
         print("You're an adult now!")
     else:
         print("You're an adult")
     ```

10. loops: `while` and `for`
    -> while loop
      -> repeats a block of code while a condition is true
      -> Example:
        ```python
        count = 0
        while count < 5:
            print(count)
            count += 1
        ```
    -> for Loop
      -> iterates over a collection (list, string, etc.) or a range of numbers
      -> Example:
        ```python
        for i in range(5):
            print(i)
        ```

11. lists
    -> definition
      -> lists are ordered collections of items. They are mutable, meaning you can modify them after creation
    -> example
      ```python
      fruits = ["apple", "banana", "cherry"]
      fruits.append("orange")  # Adds "orange" to the list
      print(fruits[1])  # Outputs: banana
      ```

12. dictionaries
    -> definition
      -> dictionaries are unordered collections of key-value pairs. They are mutable
    -> example
      ```python
      person = {"name": "Alice", "age": 25}
      print(person["name"])  # Outputs: Alice
      person["age"] = 26  # Update value
      ```

13. error handling with `try` and `except`
    -> purpose
      -> error handling allows your program to continue running even if an error occurs
    -> example
      ```python
      try:
          num = int(input("Enter a number: "))
      except ValueError:
          print("That's not a valid number!")
      ```
    -> best practice
      -> always handle exceptions that may arise from user input or external resources

14. Object-Oriented Programming (OOP)
    -> class and objects
      -> classes are blueprints for creating objects. An object is an instance of a class
      -> example:
        ```python
        class Car:
            def __init__(self, model, color):
                self.model = model
                self.color = color

        my_car = Car("Tesla", "Red")
        print(my_car.model)  # Outputs: Tesla
        ```
    -> key Concepts
      -> encapsulation: bundling data and methods into a single unit (class)
      -> inheritance: a class can inherit attributes and methods from another class
      -> polymorphism: a method can behave differently based on the object calling it

15. working with external libraries: `pip` and PyPi
    -> pip (Python Package Installer)
      -> `pip` is the default package manager for Python. It allows you to install and manage third-party libraries from PyPi (Python Package Index)
    -> example
      ```bash
      pip install requests  # Install the 'requests' library for making HTTP requests
      ```
    -> example of Using Requests
      ```python
      import requests
      response = requests.get('https://api.github.com')
      print(response.status_code)  # Outputs the HTTP status code
      ```

16. file I/O (reading and writing files)
    -> reading from a File
      -> use the `open()` function in read mode (`'r'`) to read a file
      -> example:
        ```python
        with open("example.txt", "r") as file:
            content = file.read()
            print(content)
        ```
    -> writing to a file
      -> use the `open()` function in write mode (`'w'`) to create or overwrite a file
      -> example:
        ```python
        with open("output.txt", "w") as file:
            file.write("Hello, file!")
        ```

17. best practices for Python programming
    -> write clear and descriptive code
      -> avoid overly complex code. Use meaningful variable and function names
    -> use comments wisely
      -> write comments to explain "why" something is done, not "what" is done. The code itself should be self-explanatory where possible
    -> Follow PEP 8
      -> adhere to the Python Enhancement Proposal (PEP 8), which provides guidelines for writing clean and readable Python code
    -> testing
      -> implement unit tests using Python's built-in `unittest` framework or third-party libraries like `pytest` to ensure your code works as expected
